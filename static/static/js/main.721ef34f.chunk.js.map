{"version":3,"sources":["logo.svg","components/room.js","components/controls.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Room","props","console","log","react_default","a","createElement","Fragment","admin","toString","room","playing","connected","playerCount","character","setupInfo","Controls","onSubmit","addCharacter","name","type","placeholder","startGame","value","joinRoom","socket","io","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","e","preventDefault","emit","target","setState","state","on","room_Room","controls_Controls","assign","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.721ef34f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\n\nconst Room = (props) => {\n    console.log(props);\n    return (\n        <React.Fragment>\n            <div>Admin: {props.admin.toString()}</div>\n            <div>Room: {props.room}</div>\n            <div>Playing: {props.playing.toString()}</div>\n            <div>Connected: {props.connected.toString()}</div>\n            <div>Players: {props.playerCount}</div>\n            <div>Character: {props.character}</div>\n            <div>Setup Info: <pre>{props.setupInfo}</pre></div>\n        </React.Fragment>\n    )\n}\n\nexport {\n    Room\n}","import React from 'react';\n\nconst Controls = (props) => {\n    if (props.playing) {\n        return <div>Your character is: {props.character}</div>\n    }\n\n    if (!props.room) {\n        return (\n            <form onSubmit={props.joinRoom}>\n                <input name=\"room\" type=\"text\" placeholder=\"Room\" />\n            </form>\n        )\n    }\n\n    if (!props.admin) {\n        return <div>Waiting for game to start...</div>\n    }\n\n    return (\n        <React.Fragment>\n        <form onSubmit={props.addCharacter}>\n            <input name=\"name\" type=\"text\" placeholder=\"Character...\"></input>\n        </form>\n        <form onSubmit={props.startGame}>\n            <input type=\"submit\" value=\"Start Game\" />\n        </form>\n        </React.Fragment>\n    )\n}\n\nexport {\n    Controls\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport io from 'socket.io-client';\nimport { Room } from './components/room';\nimport { Controls } from './components/controls';\n\nconst socket = io();\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      room: '',\n      admin: false,\n      connected: false,\n      playing: false,\n      character: '',\n      playerCount: 0,\n      setupInfo: '',\n    }\n\n    socket.on('connect', () => {\n      this.setState({\n        connected: true,\n      })\n    })\n    socket.on('disconnect', () => {\n      this.setState({\n        connected: false,\n      })\n    })\n    socket.on('admin', () => {\n      this.setState({\n        admin: true,\n      })\n    })\n    socket.on('startGame', () => {\n      this.setState({\n        playing: true,\n      })\n    })\n    socket.on('character', (character) => {\n      this.setState({\n        character,\n      })\n    })\n    socket.on('playerCount', (playerCount) => {\n      this.setState({\n        playerCount\n      })\n    })\n    socket.on('setupInfo', (setupInfo) => {\n      this.setState({\n        setupInfo,\n      })\n    })\n  }\n\n  joinRoom = (e) => {\n    e.preventDefault()\n    socket.emit('room', e.target.room.value)\n    this.setState({\n      room: e.target.room.value,\n    })\n  }\n\n  addCharacter(e) {\n    e.preventDefault()\n    socket.emit('addCharacter', e.target.name.value)\n  }\n\n  startGame(e) {\n    e.preventDefault()\n    socket.emit('startGame');\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n      <Room {...this.state}></Room>\n      <Controls \n        {...this.state}\n        addCharacter={this.addCharacter}\n        joinRoom={this.joinRoom}\n        startGame={this.startGame}>\n      </Controls>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}